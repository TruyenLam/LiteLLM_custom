#!/usr/bin/env python3
"""
Azure Container App Updater for LiteLLM
C·∫≠p nh·∫≠t c·∫•u h√¨nh models v√†o Azure Container App
"""

import os
import json
import subprocess
import tempfile
from pathlib import Path
from typing import Dict, Any

class AzureContainerAppUpdater:
    def __init__(self, resource_group: str = "rg-litellm", app_name: str = "litellm-app"):
        self.resource_group = resource_group
        self.app_name = app_name
        
    def check_azure_cli(self) -> bool:
        """Ki·ªÉm tra Azure CLI c√≥ s·∫µn kh√¥ng"""
        try:
            result = subprocess.run(['az', '--version'], capture_output=True, text=True)
            return result.returncode == 0
        except FileNotFoundError:
            return False
    
    def get_current_config(self) -> Dict[str, Any]:
        """L·∫•y c·∫•u h√¨nh hi·ªán t·∫°i c·ªßa container app"""
        try:
            cmd = [
                'az', 'containerapp', 'show',
                '--name', self.app_name,
                '--resource-group', self.resource_group,
                '--query', 'properties.template'
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, check=True)
            return json.loads(result.stdout)
            
        except subprocess.CalledProcessError as e:
            print(f"‚ùå L·ªói khi l·∫•y c·∫•u h√¨nh: {e}")
            return {}
    
    def create_config_volume_mount(self, config_content: str) -> Dict[str, Any]:
        """T·∫°o volume mount cho config file"""
        
        # T·∫°o c·∫•u h√¨nh cho Azure File Share (n·∫øu c·∫ßn)
        volume_config = {
            "volumes": [
                {
                    "name": "config-volume",
                    "storageType": "EmptyDir"
                }
            ],
            "containers": [
                {
                    "name": self.app_name,
                    "volumeMounts": [
                        {
                            "volumeName": "config-volume",
                            "mountPath": "/app/config"
                        }
                    ]
                }
            ]
        }
        
        return volume_config
    
    def update_environment_variables(self, additional_env: Dict[str, str] = None):
        """C·∫≠p nh·∫≠t environment variables"""
        try:
            # L·∫•y env vars hi·ªán t·∫°i
            current_env = self.get_current_env_vars()
            
            # Th√™m env vars m·ªõi n·∫øu c√≥
            if additional_env:
                current_env.update(additional_env)
            
            # T·∫°o command ƒë·ªÉ update
            env_args = []
            for key, value in current_env.items():
                env_args.extend(['--set-env-vars', f'{key}={value}'])
            
            cmd = [
                'az', 'containerapp', 'update',
                '--name', self.app_name,
                '--resource-group', self.resource_group
            ] + env_args
            
            result = subprocess.run(cmd, capture_output=True, text=True, check=True)
            print("‚úÖ ƒê√£ c·∫≠p nh·∫≠t environment variables")
            return True
            
        except subprocess.CalledProcessError as e:
            print(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t env vars: {e}")
            return False
    
    def get_current_env_vars(self) -> Dict[str, str]:
        """L·∫•y environment variables hi·ªán t·∫°i"""
        try:
            cmd = [
                'az', 'containerapp', 'show',
                '--name', self.app_name,
                '--resource-group', self.resource_group,
                '--query', 'properties.template.containers[0].env'
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, check=True)
            env_list = json.loads(result.stdout)
            
            # Convert to dict
            env_dict = {}
            if env_list:
                for env_var in env_list:
                    env_dict[env_var['name']] = env_var.get('value', '')
            
            return env_dict
            
        except subprocess.CalledProcessError:
            return {}
    
    def restart_container_app(self):
        """Restart container app ƒë·ªÉ √°p d·ª•ng config m·ªõi"""
        try:
            cmd = [
                'az', 'containerapp', 'revision', 'restart',
                '--name', self.app_name,
                '--resource-group', self.resource_group
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, check=True)
            print("‚úÖ ƒê√£ restart container app")
            return True
            
        except subprocess.CalledProcessError as e:
            print(f"‚ùå L·ªói khi restart: {e}")
            return False
    
    def update_with_config_file(self, config_file_path: str):
        """C·∫≠p nh·∫≠t container app v·ªõi config file"""
        try:
            # ƒê·ªçc config file
            with open(config_file_path, 'r', encoding='utf-8') as f:
                if config_file_path.endswith('.json'):
                    config = json.load(f)
                else:
                    import yaml
                    config = yaml.safe_load(f)
            
            print(f"üìÅ ƒê√£ ƒë·ªçc config t·ª´ {config_file_path}")
            
            # C·∫≠p nh·∫≠t environment v·ªõi s·ªë l∆∞·ª£ng models
            model_count = len(config.get('model_list', []))
            additional_env = {
                'LITELLM_CONFIG_MODELS_COUNT': str(model_count),
                'LITELLM_CONFIG_SOURCE': 'aimlapi_auto_generated'
            }
            
            # Update env vars
            self.update_environment_variables(additional_env)
            
            print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t v·ªõi {model_count} models t·ª´ AIMLAPI")
            
            return True
            
        except Exception as e:
            print(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t config: {e}")
            return False
    
    def get_app_status(self):
        """L·∫•y tr·∫°ng th√°i c·ªßa container app"""
        try:
            cmd = [
                'az', 'containerapp', 'show',
                '--name', self.app_name,
                '--resource-group', self.resource_group,
                '--query', '{RunningStatus:properties.runningStatus, LatestRevision:properties.latestRevisionName, FQDN:properties.configuration.ingress.fqdn}'
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, check=True)
            status = json.loads(result.stdout)
            
            print("\nüìä TR·∫†NG TH√ÅI CONTAINER APP:")
            print(f"   Status: {status.get('RunningStatus', 'Unknown')}")
            print(f"   Revision: {status.get('LatestRevision', 'Unknown')}")
            print(f"   URL: https://{status.get('FQDN', 'Unknown')}")
            
            return status
            
        except subprocess.CalledProcessError as e:
            print(f"‚ùå L·ªói khi l·∫•y status: {e}")
            return {}

def main():
    """Main function"""
    print("üîÑ Azure Container App Updater for LiteLLM")
    print("="*50)
    
    updater = AzureContainerAppUpdater()
    
    # Check Azure CLI
    if not updater.check_azure_cli():
        print("‚ùå Azure CLI kh√¥ng c√≥ s·∫µn. Vui l√≤ng c√†i ƒë·∫∑t Azure CLI.")
        return
    
    # Check config files
    config_files = [
        "aimlapi_litellm_config.yaml",
        "aimlapi_litellm_config.json"
    ]
    
    config_file = None
    for file_path in config_files:
        if Path(file_path).exists():
            config_file = file_path
            break
    
    if not config_file:
        print("‚ùå Kh√¥ng t√¨m th·∫•y config file. Ch·∫°y fetch_aimlapi_models.py tr∆∞·ªõc.")
        return
    
    print(f"üìÅ S·ª≠ d·ª•ng config file: {config_file}")
    
    # Get current status
    updater.get_app_status()
    
    # Update with config
    print("\nüîÑ ƒêang c·∫≠p nh·∫≠t container app...")
    success = updater.update_with_config_file(config_file)
    
    if success:
        print("\nüéâ C·∫¨P NH·∫¨T TH√ÄNH C√îNG!")
        print("\nüöÄ B∆Ø·ªöC TI·∫æP THEO:")
        print("   1. Ki·ªÉm tra logs: az containerapp logs show --name litellm-app --resource-group rg-litellm")
        print("   2. Test API: curl https://call.shareapiai.com/health/liveliness")
        print("   3. Ki·ªÉm tra models: curl https://call.shareapiai.com/v1/models")
        
        # Get updated status
        print("\n" + "="*50)
        updater.get_app_status()
    else:
        print("\n‚ùå C·∫¨P NH·∫¨T TH·∫§T B·∫†I!")

if __name__ == "__main__":
    main()
